---

  # Creating security groups is idempotent, so lets define the objects we need

- name: "create {{ project_name }} security group"
  ec2_group:
    name: "{{ item.key }}-{{ env }}-SG"
    description: "{{ item.key }} {{ env }} security group"
    region: "{{ aws_region }}"
    vpc_id: "{{ vpc_id }}"
    tags:
      Name: "{{ item.key }}"
      Project: "{{ project_name }}"
      Creator: Ansible
      Env: "{{ env }}"
  with_dict: "{{ instances }}"

- name: "apply {{ project_name }} security group rules"
  ec2_group:
    name: "{{ item.key }}-{{ env }}-SG"
    description: "{{ item.key }} {{ env }} security group"
    rules: "{{ item.value.security_groups.rules }}"
  with_dict: "{{ instances }}"

  # Creating the ec2 key is also idempotent, so again lets define the end result

- name: create ec2 key
  ec2_key:
    name: "{{ project_name }}-{{ env }}-key"
    region: "{{ aws_region }}"
  register: ec2_key
  no_log: true

  # If the key didn't exist previously, store the private key into .ssh with correct permissions so that we can bootstrap the VM correctly in a few steps time.

- name: save ec2 key
  copy:
    content: "{{ ec2_key.key.private_key }}"
    dest: "~/.ssh/{{ project_name }}-{{ env }}-key"
    mode: 0600
  when: ec2_key.changed
  tags:
    - skip_ansible_lint

  # Requirement is defined in code here:
  # - OS: Amazon Linux 2 -> amzn-ami-hvm-????.??.?.x86_64-gp2
  # then sort order determines the latest version of the AMI, of which we work with index 0.
  # I've used defaults here, allowing me to easily adapt thisi the instance dict using group_vars/host_vars should the requirements on the AMI change

- name: find latest AMI for deployment
  ec2_ami_find:
    is_public: "{{ item.value.ami_public | d(True) }}"
    owner: "{{ item.value.ami_owner | d('amazon') }}"
    region: "{{ aws_region }}"
    name: "{{ item.value.ami_name | d('amzn-ami-hvm-????.??.?.x86_64-gp2') }}"
    state: available
    sort_order: descending
    sort: name
  with_dict: "{{ instances }}"
  register: ami
  when: item.ami_id is not defined

  # We've used a loop with register, so our data is contained within two results at index 0

- name: capture AMI ID
  set_fact:
    ami_id: "{{ ami.results[0].results[0].ami_id }}"
  when: ami is defined

- name: deploy ec2 instances
  ec2:
    key_name: "{{ project_name }}-{{ env }}-key"
    instance_type: "{{ item.value.instance_type }}"
    image: "{{ item.value.ami_id | d(ami_id) }}"
    group: "{{ item.key }}-{{ env }}-SG"
    wait: True
    vpc_subnet_id: "{{ subnet_id }}"
    assign_public_ip: "{{ item.value.public_ip }}"
    exact_count: "{{ item.value.count }}"
    count_tag:
      Name: "{{ item.key }}"
      Env: "{{ env }}"
    instance_tags:
      Name: "{{ item.key }}"
      Project: "{{ project_name }}"
      Env: "{{ env }}"
      Creator: Ansible
    aws_region: "{{ aws_region }}"
  with_dict: "{{ instances }}"
  register: ec2_instances

- name: wait for ssh for the instances
  wait_for:
    host: "{{ item.1.public_dns_name }}"
    port: 22
    search_regex: OpenSSH
    delay: 1
  with_subelements:
    - "{{ ec2_instances.results }}"
    - tagged_instances
